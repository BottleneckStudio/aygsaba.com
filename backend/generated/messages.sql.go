// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: messages.sql

package generated

import (
	"context"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (id, user_id, title, body, hide_options, view_count, created_at)
VALUES (?, ?, ?, ?, ?, ?, ?)
RETURNING id, user_id, title, body, hide_options, view_count, created_at
`

type CreateMessageParams struct {
	ID          []byte
	UserID      []byte
	Title       string
	Body        string
	HideOptions string
	ViewCount   int64
	CreatedAt   string
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, createMessage,
		arg.ID,
		arg.UserID,
		arg.Title,
		arg.Body,
		arg.HideOptions,
		arg.ViewCount,
		arg.CreatedAt,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Body,
		&i.HideOptions,
		&i.ViewCount,
		&i.CreatedAt,
	)
	return i, err
}

const getMessage = `-- name: GetMessage :one
SELECT id, user_id, title, body, hide_options, view_count, created_at FROM messages
WHERE id = ? LIMIT 1
`

func (q *Queries) GetMessage(ctx context.Context, id []byte) (Message, error) {
	row := q.db.QueryRowContext(ctx, getMessage, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Body,
		&i.HideOptions,
		&i.ViewCount,
		&i.CreatedAt,
	)
	return i, err
}

const getUserMessage = `-- name: GetUserMessage :one
SELECT id, user_id, title, body, hide_options, view_count, created_at FROM messages
WHERE user_id = ? AND id = ?
LIMIT 1
`

type GetUserMessageParams struct {
	UserID []byte
	ID     []byte
}

func (q *Queries) GetUserMessage(ctx context.Context, arg GetUserMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, getUserMessage, arg.UserID, arg.ID)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Body,
		&i.HideOptions,
		&i.ViewCount,
		&i.CreatedAt,
	)
	return i, err
}

const getUserMessages = `-- name: GetUserMessages :many
SELECT id, user_id, title, body, hide_options, view_count, created_at FROM messages
WHERE user_id = ?
ORDER BY created_at DESC
`

func (q *Queries) GetUserMessages(ctx context.Context, userID []byte) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getUserMessages, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Body,
			&i.HideOptions,
			&i.ViewCount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMessages = `-- name: ListMessages :many
SELECT id, user_id, title, body, hide_options, view_count, created_at FROM messages
ORDER BY created_at DESC
`

func (q *Queries) ListMessages(ctx context.Context) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, listMessages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Body,
			&i.HideOptions,
			&i.ViewCount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
